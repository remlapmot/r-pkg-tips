[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Tips for coding R packages",
    "section": "Introduction",
    "text": "Introduction\nThe following is intended as a set of tips for people coding or about to code an R package.\nExtensive guides to writing an R package are given\n\nat https://r-pkgs.org/\nand https://kbroman.org/pkg_primer/\n\nthese tips are meant to supplement them.\nAlso look at the source code of your favourite R packages on GitHub\n\nhttps://github.com/rstudio/rmarkdown"
  },
  {
    "objectID": "01-create.html",
    "href": "01-create.html",
    "title": "1  Create a new package",
    "section": "",
    "text": "Create a new package by first installing devtools and then running\n\ninstall.packages(\"devtools\")\ndevtools::create(\"mynewpackage\")\n\nThis will generate\n✔ Setting active project to '/Users/tom/Documents/GitHub/r-pkg-tips/mynewpackage'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'Package: mynewpackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to\n    pick a license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.0\n✔ Writing 'NAMESPACE'\n✔ Writing 'mynewpackage.Rproj'\n✔ Adding '^mynewpackage\\\\.Rproj$' to '.Rbuildignore'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Adding '^\\\\.Rproj\\\\.user$' to '.Rbuildignore'\n✔ Setting active project to '&lt;no active project&gt;'\nAs seen in RStudio Files pane (nb. even though there is a .gitignore file this folder is not initialised as a Git repo yet - look for .git folder)\n\n\n\n\n\n\n\n\n\nDouble click the .Rproj file to open in RStudio as an RStudio project - this gives you the very helpful Build pane\n\n\n\n\n\n\n\n\n\nIf you are working on an existing package define folder/repo as an RStudio project (.Rproj file) to get the very helpful Build pane\n\nhttps://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects\nKey line in the .Rproj file is: BuildType: Package (None/Package/Makefile/Website/Custom) - Build pane appears for all but None\n\nInitialise the folder as a Git repo: usethis::use_git()\nNow edit/complete the obvious fields in the DESCRIPTION file\nNot all of these files will be put into our package, e.g., when we build the source package at the moment only the DESCRIPTION and NAMESPACE files are included (as our R and man directories are empty)\n\n\n\n\n\n\n\n\n\nTo prove the contents of the .tar.gz file are currently only"
  },
  {
    "objectID": "02-states.html",
    "href": "02-states.html",
    "title": "2  States",
    "section": "",
    "text": "Confusingly R packages can be in different states\n\n\n\n\n\n\n\n\n\nFiles change location depending upon state - see here\nSource - the files you code - what’s in your new folder / GitHub repo\n(Source) bundled - the .tar.gz file of your source files excluding those in .Rbuildignore - what you need to submit to CRAN\nBinary - the ‘compiled’ version of the bundled package compressed (.zip on Windows)\n\nthe helpfiles converted from .Rd to .html\nVignettes compiled to .html\nany C code etc. will have been compiled\n/R no longer contains .R files, now contains 3 files that store the parsed functions in an efficient file format - result of loading all the R code and then saving the functions with save()\n\n\n\n\n\n\n\n\n\n\nInstalled - the uncompressed zip file in the correct library folder\nIn memory - the binary, installed package loaded via library()"
  },
  {
    "objectID": "03-r-and-helpfiles.html",
    "href": "03-r-and-helpfiles.html",
    "title": "3  .R and helpfiles",
    "section": "",
    "text": ".R files contain the functions your packge will provide\nDon’t code helpfiles (.Rd files in the man folder) yourself\nUse Roxygen syntax through the roxygen2 package\n\nRoxygen syntax lines begin #'\n\nTo additionally use markdown syntax within roxygen syntax add the following line to your DESCRIPTION file\nRoxygen: list(markdown = TRUE)\nYour .R files will look something like the following, i.e., roxygen code for the helpfile for a function before the actual R code of the function\n\n#' The length of a string\n#'\n#' Technically this returns the number of \"code points\", in a string. One\n#' code point usually corresponds to one character, but not always. For example,\n#' an u with a umlaut might be represented as a single character or as the\n#' combination a u and an umlaut.\n#'\n#' @inheritParams str_detect\n#' @return A numeric vector giving number of characters (code points) in each\n#'    element of the character vector. Missing string have missing length.\n#' @seealso [stringi::stri_length()] which this function wraps.\n#' @export\n#' @examples\n#' str_length(letters)\n#' str_length(NA)\n#' str_length(factor(\"abc\"))\n#' str_length(c(\"i\", \"like\", \"programming\", NA))\nstr_length &lt;- function(string) {\n  ...\n}\n\nRunning devtools::document() will generate your .Rd files from your .R files"
  },
  {
    "objectID": "04-classes.html",
    "href": "04-classes.html",
    "title": "4  Classes",
    "section": "",
    "text": "Use classes for your functions (S3 easiest system; S4, RC)\nUnder S3 your class probably needs print, summary, print.summary methods, defined as e.g. \n\n# A function defines a new S3 class\n# This function shouldn't really print anything to the R console when run\n#' @export\nmyfun &lt;- function(...){\n  ...\n  class(output) &lt;- \"mynewclass\"\n  # alternatively given objects can have multiple classes,\n  # append your new class to any existing classes\n  # class(output) &lt;- append(\"mynewclass\", class(output))\n  output\n}\n\n# print method for objects of class mynewclass\n#' @export\nprint.mynewclass &lt;- function(x,\n  digits = max(3, getOption(\"digits\") - 3), ...){\n  ...\n  invisible(x)\n}\n\n# summary method for objects of class mynewclass\n#' @export\nsummary.mynewclass &lt;- function(...){\n  ...\n  class(output) &lt;- \"summary.mynewclass\"\n  output\n}\n\n# print method for objects of class summary.mynewclass\n#' @export\nprint.summary.mynewclass &lt;- function(x,\n  digits = max(3, getOption(\"digits\") -   3),...){\n  ...\n  invisible(x)  \n}\n\nI recommend only using dots/periods in your function names if you are coding under the S3 class system"
  },
  {
    "objectID": "05-namespace.html",
    "href": "05-namespace.html",
    "title": "5  NAMESPACE",
    "section": "",
    "text": "The NAMESPACE file is written by devtools when you run devtools::document() on your correctly formatted helpfiles\nYou must specify to @export functions you want exported from your package!\nWhilst it is tempting to #' @importFrom pkgname fn the functions you have used from other packages in the roxygen comments before your function definition in most cases you don’t need to, as you should simply call the function with the namespace qualification, e.g., code stats::lm(...) instead of lm()\nRead https://r-pkgs.org/namespace.html many times!\nRemember what happens when we load a package - an environment of its objects are placed at the top of R’s search path (figure from here)\n\n\n\n\n\n\n\n\n\nEvery package has a package environment (the exported functions) and a namespace environment (both exported and internal functions)"
  },
  {
    "objectID": "06-checking.html",
    "href": "06-checking.html",
    "title": "6  Checking",
    "section": "",
    "text": "Use R CMD check/devtools::check()/Check button in RStudio Build pane\nAim for 0 errors and 0 warnings - this is the minimum requirement for CRAN\n\n\n\n\n\n\n\n\n\nYou can setup a GitHub Action to run this on every commit into repo\nusethis::use_github_action()/usethis::use_tidy_github_actions() or copy from https://github.com/r-lib/actions\nStata and python have no such similarly thorough checking system, so well worth using\nThink about including tests with testthat or another testing package\nIf your package passes R CMD check then you can build a pkgdown website for your package with one command pkgdown::build_site()\nUse win-builder for a further check https://win-builder.r-project.org/\n\n\n\n\n\n\n\n\n\nFor both win-builder and CRAN you will need to submit the source version of your package as a .tar.gz file, e.g. in RStudio or issue R CMD build mynewpackage at the command line\n\nNote the .tar.gz file is what remotes::install_github() makes then installs if installing from GitHub"
  },
  {
    "objectID": "07-git-and-github.html",
    "href": "07-git-and-github.html",
    "title": "7  Git and GitHub",
    "section": "",
    "text": "Use a visual Git editor, e.g. GitHub Desktop\nWork in a new branch, especially if working with others\n\nThen merge into main/master when you’re sure your changes are what you want\n\nWhen coding, I recommend making your changes\n\nThen select relevant changed lines\nUse sensible commit messages, i.e., do not make one massive commit with commit message “Edits”!\n\n\n\n\n\n\n\n\n\n\nI prefer not to keep my Git repositories in a folder which is also synchronized with OneDrive/Google Drive, e.g., when you render an R Markdown file the syncing of all the auxiliary files that are created can be very annoying\nWhen contributing to a new package, after forking on GitHub, then cloning to your local machine, and opening in RStudio/setting working directory to top level of package run devtools::install_dev_deps() to install all packages under Depends, Imports, and Suggests in its DESCRIPTION file\nYour repo can contain much more than just your R package\n\nIt will often additionally contain the static website for the package (made with pkgdown) which can be hosted for free using GitHub Pages/Netlify\nRemember to exclude the files/folders not the package by adding them to the .Rbuildignore file\n\nSome people don’t like others distributing packages through a GitHub repo, because install_github() looks for a change in the hash of the latest commit - but that may have been in a file not included in the source package"
  },
  {
    "objectID": "08-system-dependencies.html",
    "href": "08-system-dependencies.html",
    "title": "8  System dependencies",
    "section": "",
    "text": "Source R packages are not totally self-contained if external C libraries (or similar) are required to build it as they are not included in the .tar.gz file\nTo install such a package either download the binary package from CRAN (binary packages for Windows take about 1 day longer to appear after the new source version appears)/RSPM/package manager\n\nIf you never want this problem always click “No” on this window\n\n\n\n\n\n\n\n\n\n\nOr, install the required system dependencies on your computer first, e.g. you may see installation failures such as\n&gt; install.packages(\"openssl\", type = \"source\")\n* installing *source* package 'openssl' ...\n** package 'openssl' successfully unpacked and MD5 sums checked\nUsing PKG_CFLAGS=\n------------------------- ANTICONF ERROR ---------------------------\nConfiguration failed because openssl was not found. Try installing:\n * deb: libssl-dev (Debian, Ubuntu, etc)\n * rpm: openssl-devel (Fedora, CentOS, RHEL)\n * csw: libssl_dev (Solaris)\n * brew: openssl@1.1 (Mac OSX)\nIf openssl is already installed, check that 'pkg-config' is in your\nPATH and PKG_CONFIG_PATH contains a openssl.pc file. If pkg-config\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\nR CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'\n--------------------------------------------------------------------\nERROR: configuration failed for package 'openssl'\n* removing '/usr/local/lib/R/site-library/openssl'\nCheck if a package name is mentioned in the error message. To install it use the following tools for your operating system\n\nWindows:\n\nInstall the appropriate version of RTools (currently RTools 4.3 for R 4.3.0) from here, this provides the pacman system\n\nmacOS:\n\nInstall Command Line Tools, issue in the Terminal app\nxcode-select --install\nInstall the GNU Fortran compiler from the link given on https://mac.r-project.org/tools/\nMost other dependencies are available using a system package manager, the most popular of which is Homebrew, e.g.,\nbrew install ...\n\nLinux\n\nUse the package manager with your distro, e.g. on Ubuntu\nsudo apt-get install ..."
  },
  {
    "objectID": "99-session-info.html",
    "href": "99-session-info.html",
    "title": "9  Session info",
    "section": "",
    "text": "R session information for reproducibility.\n\nsessioninfo::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21 ucrt)\n os       Windows 11 x64 (build 22621)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United Kingdom.utf8\n ctype    English_United Kingdom.utf8\n tz       Europe/London\n date     2023-05-05\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.3.0)\n knitr         1.42.8  2023-05-03 [1] Github (yihui/knitr@58e7879)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.21    2023-03-26 [1] CRAN (R 4.3.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n\n [1] C:/Users/tom/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.0/library\n\n──────────────────────────────────────────────────────────────────────────────\n\nquarto::quarto_version()\n\n[1] '1.3.340'"
  }
]